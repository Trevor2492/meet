[{"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/index.js":"1","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/App.js":"2","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/reportWebVitals.js":"3","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/CitySearch.js":"4","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/EventList.js":"5","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/Event.js":"6","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/api.js":"7","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/NumberOfEvents.js":"8","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/mock-data.js":"9","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/Alert.js":"10","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/service-worker.js":"11","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/serviceWorkerRegistration.js":"12","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/EventGenre.js":"13"},{"size":713,"mtime":1609961869277,"results":"14","hashOfConfig":"15"},{"size":3515,"mtime":1610410781909,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1607379417445,"results":"17","hashOfConfig":"15"},{"size":1667,"mtime":1609880393233,"results":"18","hashOfConfig":"15"},{"size":315,"mtime":1608580750622,"results":"19","hashOfConfig":"15"},{"size":761,"mtime":1608682716280,"results":"20","hashOfConfig":"15"},{"size":3041,"mtime":1610050648377,"results":"21","hashOfConfig":"15"},{"size":839,"mtime":1609880293287,"results":"22","hashOfConfig":"15"},{"size":3048,"mtime":1608171463594,"results":"23","hashOfConfig":"15"},{"size":604,"mtime":1609881369304,"results":"24","hashOfConfig":"15"},{"size":2912,"mtime":1609961610163,"results":"25","hashOfConfig":"26"},{"size":5064,"mtime":1609961888151,"results":"27","hashOfConfig":"15"},{"size":938,"mtime":1610411323054,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"10x102k",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u0yxxn",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/index.js",[],["58","59"],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/App.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/reportWebVitals.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/CitySearch.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/EventList.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/Event.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/api.js",["60","61","62"],"import { mockData } from './mock-data';\nimport axios from 'axios';\nimport NProgress from 'nprogress';\nimport { ErrorAlert } from './Alert';\n\n\nexport const getAccesToken = async () => {\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst tokenCheck = accessToken && (await checkToken(accessToken));\n\n\t\tif (!accessToken || tokenCheck.error) {\n\t\t\tawait localStorage.removeItem('access_token');\n\t\t\tconst searchParams = new URLSearchParams(window.location.search);\n\t\t\tconst code = await searchParams.get('code');\n\t\t\tif (!code) {\n\t\t\t\tconst results = await axios.get('https://e07oz99iuj.execute-api.us-east-2.amazonaws.com/dev/api/get-auth-url'); //input my endpoint here\n\t\t\t\tconst { authUrl } = results.data;\n\t\t\t\treturn (window.location.href = authUrl);\n\t\t\t}\n\t\t\treturn code && getToken(code);\n\t\t}\n\t\treturn accessToken\n}\n\n\nconst checkToken = async (accessToken) => {\n\tconst result = await fetch(\n\t\t`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n\t)\n\t\t.then((res) => res.json())\n\t\t.catch((error) => error.json());\n\n\treturn result;\n};\n\n\nexport const getEvents = async () => {\n\tNProgress.start();\n\n\tif (window.location.href.startsWith('http://localhost')) {\n\t\tNProgress.done();\n\t\treturn mockData;\n\t}\n\n\tif (!navigator.onLine) {\n\t\tconst events = localStorage.getItem(\"lastEvents\");\n\t\tconst parsedEvents = JSON.parse(events).events;\n\t\tNProgress.done();\n\t\tconsole.log('User is currently offline and any events shown may not be accurate. Go online then re-open the app to load current events.');\n    return parsedEvents;\n  }\n\n\tconst token = await getAccesToken();\n\n\tif (token) {\n    removeQuery();\n    const url = 'https://e07oz99iuj.execute-api.us-east-2.amazonaws.com/dev/api/get-events' + '/' + token;\n    const result = await axios.get(url);\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n    NProgress.done();\n    return result.data.events;\n  }\n\n};\n\nconst removeQuery = () => {\n\tif (window.history.pushState && window.location.pathname) {\n    var newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\nconst getToken = async (code) => {\n  const encodeCode = encodeURIComponent(code);\n  const { access_token } = await fetch(\n    'https://e07oz99iuj.execute-api.us-east-2.amazonaws.com/dev/api/token' + '/' + encodeCode\n  )\n    .then((res) => {\n      return res.json();\n    })\n    .catch((error) => error);\n\n  access_token && localStorage.setItem(\"access_token\", access_token);\n\n  return access_token;\n};\n\nexport const extractLocations = (events) => {\n\tvar extractLocations = events.map((event) => event.location);\n\tvar locations = [...new Set(extractLocations)];\n\treturn locations;\n};\n\n","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/NumberOfEvents.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/mock-data.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/Alert.js",["63","64"],"import React, { Component } from 'react';\nexport { InfoAlert };\nexport { ErrorAlert };\n\nexport default class Alert extends Component {\n\tconstructor(props) {\n    super(props);\n    this.color = null;\n  }\n\n  getStyle = () => {\n    return {\n\t\t\tcolor: this.color,\n    };\n  }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Alert\">\n        <p style={this.getStyle()}>{this.props.text}</p>\n      </div>\n\t\t)\n\t}\n}\n\n\nclass InfoAlert extends Alert {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.color = 'darkorange';\n\t}\n}\n\nclass ErrorAlert extends Alert {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.color = 'red';\n\t}\n}","/Users/trevorallen/Documents/WebDev/Immersion/meet/src/service-worker.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/serviceWorkerRegistration.js",[],"/Users/trevorallen/Documents/WebDev/Immersion/meet/src/EventGenre.js",["65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":58,"column":93,"nodeType":"76","messageId":"77","endLine":58,"endColumn":94},{"ruleId":"74","severity":1,"message":"75","line":88,"column":76,"nodeType":"76","messageId":"77","endLine":88,"endColumn":77},{"ruleId":"78","severity":1,"message":"79","line":2,"column":10,"nodeType":"72","messageId":"80","endLine":2,"endColumn":19},{"ruleId":"78","severity":1,"message":"81","line":3,"column":10,"nodeType":"72","messageId":"80","endLine":3,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":9,"column":49,"nodeType":"84","endLine":9,"endColumn":57,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'ErrorAlert' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-use-before-define","'InfoAlert' was used before it was defined.","usedBeforeDefined","'ErrorAlert' was used before it was defined.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [events, getData]",{"range":"91","text":"92"},[243,251],"[events, getData]"]